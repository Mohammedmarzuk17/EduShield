name: Update EduShield Blocklists

on:
  schedule:
    - cron: '0 1 * * *'  # Runs daily at 01:00 UTC
  workflow_dispatch:     # Manual trigger option

jobs:
  update-blocklists:
    runs-on: ubuntu-latest
    steps:
      # 1️⃣ Checkout repo
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          persist-credentials: false  # prevent default token usage

      # 2️⃣ Set up Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.13

      # 3️⃣ Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests beautifulsoup4 pandas PyPDF2

      # 4️⃣ Run the blocklist update script (existing)
      - name: Run blocklist update script
        run: python update_blocklist.py

      # 5️⃣ Split blocklist into multiple files by source(s)
      - name: Split blocklist by source
        run: |
          mkdir -p blocklists

          python - <<'EOF'
          import json, os

          # Load the main blocklist.json generated by update_blocklist.py
          with open("blocklist.json", "r", encoding="utf-8") as f:
              data = json.load(f)

          domains = data.get("domains", [])

          grouped = {}
          for entry in domains:
              if isinstance(entry, dict):
                  sources = entry.get("sources") or ["unknown"]
                  for src in sources:
                      grouped.setdefault(src, []).append(entry)
              else:
                  grouped.setdefault("unknown", []).append(
                      {"domain": str(entry), "sources": ["unknown"]}
                  )

          # Save each group into blocklists/<source>.json
          os.makedirs("blocklists", exist_ok=True)
          for src, items in grouped.items():
              out_file = f"blocklists/{src.lower().replace(' ', '_')}.json"
              with open(out_file, "w", encoding="utf-8") as f:
                  json.dump({"domains": items}, f, indent=2, ensure_ascii=False)
              print(f"✅ Saved {len(items)} entries to {out_file}")
          EOF

      # 6️⃣ Generate manifest.json inside /blocklists/ with sources
      - name: Generate blocklists/manifest.json
        run: |
          python - <<'EOF'
          import os, json

          files = []
          for f in os.listdir("blocklists"):
              if f.endswith(".json"):
                  source_name = f.replace(".json", "").replace("_", " ").title()
                  files.append({"file": f, "source": source_name})

          with open("blocklists/manifest.json", "w", encoding="utf-8") as mf:
              json.dump({"files": files}, mf, indent=2, ensure_ascii=False)

          print("✅ Generated blocklists/manifest.json")
          EOF

      # 7️⃣ Commit and push updates
      - name: Commit and push updated blocklists
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

          # Set remote with PAT
          git remote set-url origin "https://${PAT_TOKEN}@github.com/${{ github.repository }}.git"

          # Add main + split blocklists + manifest.json
          git add blocklist.json blocklists/*.json
          git commit -m "Auto-update blocklists + manifest.json (with sources)" || echo "No changes to commit"

          # Try rebase first
          git pull origin main --rebase || echo "No remote changes to pull"

          # Push
          git push origin HEAD:main --force
        env:
          PAT_TOKEN: ${{ secrets.edushield_token }}
